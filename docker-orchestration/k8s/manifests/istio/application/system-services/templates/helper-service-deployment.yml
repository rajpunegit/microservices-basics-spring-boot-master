apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}-mysql
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-mysql
    spec:
      containers:
      - name: {{ .Release.Name }}-mysql
        image: {{ .Values.mysql.image }}:{{ .Values.mysql.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - containerPort: {{ .Values.service.mysql.internalPort }}
          name: "tcp"
        env:
        - name: MYSQL_DATABASE
          value: {{ .Values.service.mysql.database }}
        - name: MYSQL_ROOT_PASSWORD
          value: {{ .Values.service.mysql.rootPassword }}
        readinessProbe:
          exec:
            # Check we can ping TCP
            command: ["mysqladmin", "ping"]
          initialDelaySeconds: 5
          periodSeconds: 2
          timeoutSeconds: 1

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-config-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}-config-server
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-config-server
      annotations:
        sidecar.istio.io/rewriteAppHTTPProbers: "true"
    spec:
      containers:
      - name: {{ .Release.Name }}-config-server
        image: {{ .Values.configserver.image }}:{{ .Values.configserver.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - containerPort: {{ .Values.service.configserver.internalPort}}
          name: "http"
        command: ["/bin/bash"]
        args: ["-c", 'until nslookup mysql; do echo Waiting for mySql database to start; sleep 5; done; /app/run.sh']
        livenessProbe:
          httpGet:
            path: /health
            port: {{ .Values.service.configserver.internalPort }}
          initialDelaySeconds: 10
          periodSeconds: 3
          timeoutSeconds: 2

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-eurekaregistry
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}-eurekaregistry
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-eurekaregistry
      annotations:
        sidecar.istio.io/rewriteAppHTTPProbers: "true"
    spec:
      containers:
      - name: {{ .Release.Name }}-eurekaregistry
        image: {{ .Values.eurekaregistry.image }}:{{ .Values.eurekaregistry.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - containerPort: {{ .Values.service.eurekaregistry.internalPort}}
          name: "http"
        env:
        - name: SPRING_ACTIVE_PROFILE
          value: {{ .Values.spring.activeProfile }}
        command: ["/bin/bash"]
        args: ["-c", 'while ! curl -s http://configserver:8888/health > /dev/null; do echo Waiting for Config Service to start; sleep 5; done; /app/run.sh']
        livenessProbe:
          httpGet:
            path: /health
            port: {{ .Values.service.eurekaregistry.internalPort }}
          initialDelaySeconds: 10
          periodSeconds: 3
          timeoutSeconds: 2