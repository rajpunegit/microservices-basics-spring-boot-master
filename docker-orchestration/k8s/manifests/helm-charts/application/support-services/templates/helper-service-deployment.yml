apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-mysql
spec:
  replicas: {{ .Values.mysql.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-mysql
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-mysql
    spec:
      containers:
      - name: {{ .Release.Name }}-mysql
        image: {{ .Values.mysql.image }}:{{ .Values.mysql.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        resources:
          requests:
            memory: {{ .Values.mysql.containerMemoryRequest }}
          limits:
            memory: {{ .Values.mysql.containerMemoryLimit }}
        ports:
        - containerPort: {{ .Values.service.mysql.internalPort }}
          name: "tcp"
        env:
        - name: MYSQL_DATABASE
          value: {{ .Values.service.mysql.database }}
        - name: MYSQL_ROOT_PASSWORD
          value: {{ .Values.service.mysql.rootPassword }}
        readinessProbe:
          exec:
            # Check we can ping TCP
            command: ["mysqladmin", "ping"]
          initialDelaySeconds: 20
          periodSeconds: 2
          timeoutSeconds: 1

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-config-server
spec:
  replicas: {{ .Values.configserver.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-config-server
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-config-server
    spec:
      containers:
      - name: {{ .Release.Name }}-config-server
        image: {{ .Values.configserver.image }}:{{ .Values.configserver.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        resources:
          requests:
            memory: {{ .Values.configserver.containerMemoryRequest }}
          limits:
            memory: {{ .Values.configserver.containerMemoryLimit }}
        ports:
        - containerPort: {{ .Values.service.configserver.internalPort}}
          name: "http"
        env:
        - name: JAVA_OPTIONS
          value: {{ .Values.configserver.javaOptions }}  
        command: ["/bin/bash"]
        args: ["-c", 'until nslookup mysqldb; do echo Waiting for mySql database to start; sleep 5; done; /app/run.sh']
        livenessProbe:
          httpGet:
            path: /health
            port: {{ .Values.service.configserver.internalPort }}
          initialDelaySeconds: 45
          periodSeconds: 10
          timeoutSeconds: 5

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-eurekaregistry
spec:
  replicas: {{ .Values.eurekaregistry.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-eurekaregistry
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-eurekaregistry
    spec:
      containers:
      - name: {{ .Release.Name }}-eurekaregistry
        image: {{ .Values.eurekaregistry.image }}:{{ .Values.eurekaregistry.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        resources:
          requests:
            memory: {{ .Values.eurekaregistry.containerMemoryRequest }}
          limits:
            memory: {{ .Values.eurekaregistry.containerMemoryLimit }}
        ports:
        - containerPort: {{ .Values.service.eurekaregistry.internalPort}}
          name: "http"
        env:
        - name: SPRING_ACTIVE_PROFILE
          value: {{ .Values.spring.activeProfile }}
        - name: JAVA_OPTIONS
          value: {{ .Values.eurekaregistry.javaOptions }}
        command: ["/bin/bash"]
        args: ["-c", 'while ! curl -s http://configserver:8888/health > /dev/null; do echo Waiting for Config Service to start; sleep 5; done; /app/run.sh']
        livenessProbe:
          httpGet:
            path: /health
            port: {{ .Values.service.eurekaregistry.internalPort}}
          initialDelaySeconds: 45
          periodSeconds: 10
          timeoutSeconds: 2

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-zipkin-server
spec:
  replicas: {{ .Values.zipkinserver.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-zipkin-server
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-zipkin-server
    spec:
      containers:
      - name: {{ .Release.Name }}-zipkin-server
        image: {{ .Values.zipkinserver.image }}:{{ .Values.zipkinserver.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        resources:
          requests:
            memory: {{ .Values.zipkinserver.containerMemoryRequest }}
          limits:
            memory: {{ .Values.zipkinserver.containerMemoryLimit }}
        ports:
        - containerPort: {{ .Values.service.zipkinserver.internalPort}}
          name: "http"
        env:
        - name: SPRING_ACTIVE_PROFILE
          value: {{ .Values.spring.activeProfile }}
        - name: JAVA_OPTIONS
          value: {{ .Values.zipkinserver.javaOptions }}
        command: ["/bin/bash"]
        args: ["-c", 'while ! curl -s http://configserver:8888/health > /dev/null; do echo Waiting for Config Service to start; sleep 5; done; /app/run.sh']
        livenessProbe:
          httpGet:
            path: /health
            port: {{ .Values.service.zipkinserver.internalPort}}
          initialDelaySeconds: 45
          periodSeconds: 10
          timeoutSeconds: 2

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-auth-server
spec:
  replicas: {{ .Values.authserver.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-auth-server
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-auth-server
    spec:
      containers:
      - name: {{ .Release.Name }}-auth-server
        image: {{ .Values.authserver.image }}:{{ .Values.authserver.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        resources:
          requests:
            memory: {{ .Values.authserver.containerMemoryRequest }}
          limits:
            memory: {{ .Values.authserver.containerMemoryLimit }}
        ports:
        - containerPort: {{ .Values.service.authserver.internalPort}}
          name: "http"
        env:
        - name: SPRING_ACTIVE_PROFILE
          value: {{ .Values.spring.activeProfile }}
        - name: JAVA_OPTIONS
          value: {{ .Values.authserver.javaOptions }}
        command: ["/bin/bash"]
        args: ["-c", 'while ! curl -s http://eurekaregistry:8761/health > /dev/null; do echo Waiting for Eureka Registry Service to start; sleep 5; done; /app/run.sh']
        startupProbe:
          httpGet:
            path: /swagger-ui.html
            port: {{ .Values.service.authserver.internalPort}}
          # total of 30 x 10 = 300 seconds for startup to finish, have not set the liveness probe since it was failing for some unknown reason
          failureThreshold: 30
          periodSeconds: 10
          
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-api-gateway
spec:
  replicas: {{ .Values.apigateway.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-api-gateway
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-api-gateway
    spec:
      containers:
      - name: {{ .Release.Name }}-api-gateway
        image: {{ .Values.apigateway.image }}:{{ .Values.apigateway.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        resources:
          requests:
            memory: {{ .Values.apigateway.containerMemoryRequest }}
          limits:
            memory: {{ .Values.apigateway.containerMemoryLimit }}
        ports:
        - containerPort: {{ .Values.service.apigateway.internalPort}}
          name: "http"
        env:
        - name: SPRING_ACTIVE_PROFILE
          value: {{ .Values.spring.activeProfile }}
        - name: JAVA_OPTIONS
          value: {{ .Values.apigateway.javaOptions }}
        command: ["/bin/bash"]
        args: ["-c", 'while ! curl -s http://authserver:8899/health > /dev/null; do echo Waiting for OAuth2 server to start; sleep 5; done; /app/run.sh']
        livenessProbe:
          httpGet:
            path: /health
            port: {{ .Values.service.apigateway.internalPort}}
          initialDelaySeconds: 120
          periodSeconds: 20
          timeoutSeconds: 5